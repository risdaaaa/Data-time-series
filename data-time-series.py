# -*- coding: utf-8 -*-
"""ProjectRev.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TjGzs5kTLenQ7ZoVxGbcARanwkSuAMMk
"""

from google.colab import files
files.upload()

! mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!kaggle datasets download -d hasibullahaman/traffic-prediction-dataset
!unzip /content/traffic-prediction-dataset.zip

import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.model_selection import train_test_split

data = pd.read_csv('Traffic.csv')
data.info()
print(data)
data.isnull().sum()
Time = data['Time'].values
Total  = data['Total'].values

train_data, val_data = train_test_split(data, test_size=0.2, shuffle=False)
train_Total = train_data['Total'].values
val_Total = val_data['Total'].values

scaler = MinMaxScaler()
train_Total = scaler.fit_transform(train_Total.reshape(-1, 1))
val_Total = scaler.transform(val_Total.reshape(-1, 1))

plt.figure(figsize=(15,5))
plt.plot(train_data['Time'], train_Total, label='Train Data')
plt.plot(val_data['Time'], val_Total, label='Validation Data')
plt.title('Total Traffic')
plt.legend()
plt.show()

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.cast(series, tf.float32)  # Convert to float32
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1]))
    return ds.batch(batch_size).prefetch(1)

train_set = windowed_dataset(train_Total, window_size=60, batch_size=100, shuffle_buffer=1000)
val_set = windowed_dataset(val_Total, window_size=60, batch_size=100, shuffle_buffer=1000)

model = tf.keras.models.Sequential([
    tf.keras.layers.LSTM(128, return_sequences=True),
    tf.keras.layers.LSTM(64),
    tf.keras.layers.Dense(64, activation="relu"),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(1)
])
optimizer = tf.keras.optimizers.Adam(lr=0.001)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

threshold = (train_Total.max() - train_Total.min()) * 10/100
print("Threshold MAE:", threshold)

callback = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=5)

history = model.fit(train_set, epochs=100, validation_data=val_set, callbacks=[callback])

plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend()
plt.show()

val_loss, val_mae = model.evaluate(val_set)
print("Validation Loss:", val_loss)
print("Validation MAE:", val_mae)